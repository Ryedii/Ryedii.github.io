<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FFT</title>
    <url>/blog/FFT</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><script type="math/tex; mode=display">
\begin{aligned}
A(x)& =\sum_{i=0}^na_ix_i \\ 
& =(x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)
\end{aligned}</script><hr>
<h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><script type="math/tex; mode=display">
A(x)B(x)=\sum_{i=0}^n\sum_{j=0}^na_ib_ix^{i+j}</script><p>若 $A\ast  B=C$，可知求 $C$ 的系数数列时间复杂度 $O(n^2)$。</p>
<p>考虑点值表达式的卷积</p>
<script type="math/tex; mode=display">
A(x)=(x_0,y_0),(x_1,y_1),\cdots,(x_n,y_n)</script><script type="math/tex; mode=display">
B(x)=(x_0,y_0'),(x_1,y_1'),\cdots,(x_n,y_n'))</script><p>可得出 $C$ 的一个不完整表达</p>
<script type="math/tex; mode=display">
C(x)=(x_0,y_0y_0'),(x_1,y_1y_1'),\cdots,(x_n,y_ny_n')</script><p>若将点对个数增至 $2n+1$ 个，可知求出 $C$ 的点值数列时间复杂度 $O(n)$。</p>
<hr>
<h3 id="DFT-amp-IDFT"><a href="#DFT-amp-IDFT" class="headerlink" title="DFT &amp; IDFT"></a>DFT &amp; IDFT</h3><p><strong>DFT(Discrete Fourier Transform， 离散傅里叶变换)</strong> 是系数数列 $a_0,a_1,\cdots,a_n$ 转为点值数列的过程，<strong>IDFT(Inverse\ Discrete\ Fourier\ Transform，逆离散傅里叶变换</strong> 是 <strong>DFT</strong> 的逆运算。</p>
<hr>
<h3 id="FFT​"><a href="#FFT​" class="headerlink" title="FFT​"></a>FFT​</h3><p>考虑 <strong>DFT​</strong> 和 <strong>IDFT</strong> 均是 $O(n^2)$，可以利用 <strong>FFT(Fast Fourier Transform，快速傅里叶变换)</strong> 将其加速。</p>
<h4 id="单位复根"><a href="#单位复根" class="headerlink" title="单位复根"></a>单位复根</h4><p>$\omega^n=1$ 在复数域下有 $n$ 个不同的根。</p>
<script type="math/tex; mode=display">
e^{ix}=\cos x+i\sin x</script><script type="math/tex; mode=display">
e^{2\pi i}=1=\omega^n</script><script type="math/tex; mode=display">
\omega=e^{\frac{2\pi i}n}</script><p>定义主次单位根</p>
<script type="math/tex; mode=display">
\omega_n=e^{\frac{2\pi i}n}</script><p>对于其它单位根，记作</p>
<script type="math/tex; mode=display">
w_n^k=e^{\frac{2\pi ik}n}</script><p>存在以下性质</p>
<script type="math/tex; mode=display">
\omega_{2n}^{k}+\omega_{2n}^{n+k}=0</script><script type="math/tex; mode=display">
(\omega_{2n}^k)^2=\omega_{n}^k</script><p>考虑用单位复根的性质优化 <strong>DFT</strong>。</p>
<p>对于多项式 $A(x)=\sum_{i=0}^{2n-1}a_ix^i$，其中 $2n=2^k$，我们将 $\omega_{2n}^0,\omega_{2n}^1,\cdots,\omega_{2n}^{2n-1}$ 代入公式计算点值。</p>
<p>现在重定义两个多项式</p>
<script type="math/tex; mode=display">
A_0(x)=a_0+a_2x+a_4x^2+\cdots+a_{2n}x^n</script><script type="math/tex; mode=display">
A_1(x)=a_1+a_3x+a_5x^2+\cdots+a_{2n-1}x^n</script><p>显然</p>
<script type="math/tex; mode=display">
A(x)=A_0(x^2)+xA_1(x^2)</script><p>将单位复根代入上式</p>
<script type="math/tex; mode=display">
\begin{aligned}
A(\omega_{2n}^k) &=A_0((\omega_{2n}^k)^2)+\omega_{2n}^kA_1((\omega_{2n}^k)^2)\\
&=A_0(\omega_n^k)+\omega_{2n}^kA_1(\omega_n^k)\\
A(\omega_{2n}^{n+k})&=A_0((\omega_{2n}^{n+k})^2)+\omega_{2n}^{n+k}A_1((\omega_{2n}^{n+k})^2)\\
&=A_0(\omega_n^k)-\omega_{2n}^kA_1(\omega_n^k)
\end{aligned}</script><p>发现对于 $k\in[0,1,\cdots,n-1]$ $A(\omega_{2n}^k)$ 和 $A(\omega_{2n}^{n+k})$ 是可以在一起计算的。</p>
<p>于是有以下伪代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">FFT</span><span class="params">(<span class="built_in">complex</span> A[], <span class="keyword">int</span> Length)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">if</span> Length </span>== <span class="number">1</span> <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">complex</span> A0[Length / <span class="number">2</span>], A1[Length / <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">int</span> i = <span class="number">0</span> to Length / <span class="number">2</span> - <span class="number">1</span> with i += <span class="number">1</span></span><br><span class="line">    	A0[i] = A[i * <span class="number">2</span>]</span><br><span class="line">        A1[i] = A[i * <span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">  FFT(A0, Length / <span class="number">2</span>)</span><br><span class="line">  FFT(A1, Length / <span class="number">2</span>)</span><br><span class="line">  <span class="built_in">complex</span> wn = (<span class="built_in">cos</span>(<span class="number">2</span> * Pi / Length), <span class="built_in">sin</span>(<span class="number">2</span> * Pi / Length))</span><br><span class="line">  <span class="built_in">complex</span> w = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">int</span> i = <span class="number">0</span> to Length / <span class="number">2</span> - <span class="number">1</span> with i += <span class="number">1</span>, w *= wn</span><br><span class="line">    A[i] = A0[i] + A1[i] * w</span><br><span class="line">    A[i + Length / <span class="number">2</span>] = A0[i] - A1[i] * w</span><br></pre></td></tr></table></figure>
<p>考虑 <strong>IDFT</strong>，<strong>IDFT</strong> 是 <strong>DFT</strong> 的逆运算，令 $DFT({a_i})={b_i}$，已知</p>
<script type="math/tex; mode=display">
b_k=\sum_{i=0}^{n-1}a_i\omega_n^{ki}</script><p>存在结论</p>
<script type="math/tex; mode=display">
a_k=\frac 1 n\sum_{i=0}^{n-1}b_i\omega_n^{-ki}</script><p>证明，将前式代入后式</p>
<script type="math/tex; mode=display">
\begin{aligned}
a_k&=\frac 1 n\sum_{i=0}^{n-1}b_i\omega_n^{-ki}\\
&=\frac 1 n\sum_{i=0}^{n-1}\omega_n^{-ki}\sum_{j=0}^{n-1}a_j\omega_n^{ij}\\
&=\frac 1 n\sum_{j=0}^{n-1}a_j\sum_{i=0}^{n-1}\omega_n^{-ki}\omega_{n}^{ij}\\
&=\frac 1 n\sum_{j=0}^{n-1}a_j\sum_{i=0}^{n-1}\omega_{n}^{i(j-k)}
\end{aligned}</script><p>考虑 $\sum_{i=0}^{n-1}\omega_n^{i(j-k)}$</p>
<p>当 $j=k$，</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{n-1}\omega_n^{i(j-k)}=\sum1=n</script><p>当 $j\neq k$， </p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum_{i=0}^{n-1}\omega_n^{i(j-k)}&=\sum_{i=0}^{n-1}(\omega_n^{j-k})^i\\
&=\frac{1-(\omega_n^{j-k})^n}{1-\omega_n^{j-k}}\\
&=\frac{1-(\omega_n^n)^{j-k}}{1-\omega_n^{j-k}}=\frac{1-1}{1-\omega_n^{j-k}}=0
\end{aligned}</script><p>所以，</p>
<script type="math/tex; mode=display">
\begin{aligned}
a_k&=\frac 1 n\sum_{j=0}^{n-1}a_j\sum_{i=0}^{n-1}\omega_{n}^{i(j-k)}\\
&=\frac 1 n\cdot na_k=a_k
\end{aligned}</script><p>发现 <strong>DFT</strong> 和 <strong>IDFT</strong> 的公式形式一样，对于指数上的 $-1$ 只需要在代码中加入一个开关即可。</p>
<h4 id="蝴蝶定理"><a href="#蝴蝶定理" class="headerlink" title="蝴蝶定理"></a>蝴蝶定理</h4><p>考虑 <strong>FFT</strong> 的分治过程，以 $n=16$ 为例</p>
<script type="math/tex; mode=display">
\{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\}</script><script type="math/tex; mode=display">
\{0,2,4,6,8,10,12,14\},\{1,3,5,7,9,11,13,15\}</script><script type="math/tex; mode=display">
\{0,4,8,12\},\{2,6,10,14\},\{1,5,9,13\},\{3,7,11,15\}</script><script type="math/tex; mode=display">
\{0,8\},\{4,12\},\{2,10\},\{6,14\},\{1,9\},\{5,13\},\{3,11\},\{7,15\}</script><p>其二进制下表示，</p>
<script type="math/tex; mode=display">
\{0000,1000\},\{0100,1100\},\{0010,1010\},\{0110,1110\},</script><script type="math/tex; mode=display">
\{0001,1001\},\{0101,1101\},\{0011,1011\},\{0111,1111\}</script><p>观察发现，若干次蝴蝶操作（奇偶分治）后，其数位二进制翻转后是连续的。</p>
<p>对于二进制翻转，可用递推计算，$rev_i=rev_{i/2}|(i\&amp;1)^{d-1}$，其中 $n=2^d$。</p>
<p>考虑用蝴蝶定理使 <strong>FFT</strong> 的过程避免递归，可以先将 ${a_i}$ 按 $rev$ 序重新排列，在分治树上从下往上。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">FFT</span><span class="params">(<span class="built_in">complex</span> A[], <span class="keyword">int</span> Length, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">for</span> <span class="keyword">int</span> i </span>= <span class="number">0</span> to Length - <span class="number">1</span> with i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; Rev[i]</span><br><span class="line">      swap(A[i], A[Rev[i]])</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">int</span> k = <span class="number">1</span> to n - <span class="number">1</span> with k *= <span class="number">2</span></span><br><span class="line">    <span class="built_in">complex</span> wn = (<span class="built_in">cos</span>(Pi / k), <span class="built_in">sin</span>(on * Pi / k))</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">int</span> i = <span class="number">0</span> to n with i += k * <span class="number">2</span></span><br><span class="line">      <span class="built_in">complex</span> w = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">for</span> <span class="keyword">int</span> j = i to i + k - <span class="number">1</span> with j += <span class="number">1</span></span><br><span class="line">        <span class="built_in">complex</span> x = a[j]</span><br><span class="line">        <span class="built_in">complex</span> y = a[j + k]</span><br><span class="line">        a[j] = x + y</span><br><span class="line">        a[j + k] = x - y</span><br><span class="line">  <span class="keyword">if</span> on == <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">int</span> i = <span class="number">0</span> to n - <span class="number">1</span> with i += <span class="number">1</span></span><br><span class="line">      a[i] /= n</span><br></pre></td></tr></table></figure>
<p>然后枚举当前合并的长度 $2k$，枚举合并区间开始位置 $i$，枚举区间中的元素 $a_j$。</p>
<hr>
<h4 id="Luogu-P3803-多项式乘法-FFT"><a href="#Luogu-P3803-多项式乘法-FFT" class="headerlink" title="Luogu P3803 多项式乘法(FFT)"></a><a href="https://www.luogu.org/problem/P3803" target="_blank" rel="noopener">Luogu P3803 多项式乘法(FFT)</a></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> io::in;</span><br><span class="line"><span class="keyword">using</span> io::out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4200000</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">complex</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> rev[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">complex</span> a[], <span class="keyword">int</span> n, <span class="built_in">complex</span> b[], <span class="keyword">int</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="built_in">complex</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> on)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  in(n), in(m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt;= n; ++i)</span><br><span class="line">    in(x), a[i].r = x;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt;= m; ++i)</span><br><span class="line">    in(x), b[i].r = x;</span><br><span class="line"></span><br><span class="line">  mul(a, n, b, m);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt;= n + m; ++i)</span><br><span class="line">    x = (<span class="keyword">int</span>)(a[i].r + <span class="number">0.5</span>), out(x);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">complex</span> a[], <span class="keyword">int</span> n, <span class="built_in">complex</span> b[], <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; l &lt;= n + m; l &lt;&lt;= <span class="number">1</span>, ++d);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">    rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | ((i &amp; <span class="number">1</span>) &lt;&lt; d - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  fft(a, l, <span class="number">1</span>), fft(b, l, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)</span><br><span class="line">    a[i] = a[i] * b[i];</span><br><span class="line">  fft(a, l, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="built_in">complex</span> a[], <span class="keyword">int</span> n, <span class="keyword">int</span> on)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rev[i]) swap(a[i], a[rev[i]]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">complex</span> t, x, w;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, i, j; k &lt; n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, t = (<span class="built_in">complex</span>)&#123; <span class="built_in">cos</span>(PI / k), <span class="built_in">sin</span>(on * PI / k) &#125;; i &lt; n; i += k &lt;&lt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">for</span> (j = i, w = (<span class="built_in">complex</span>)&#123; <span class="number">1</span>, <span class="number">0</span> &#125;; j &lt; i + k; ++j, w = w * t)</span><br><span class="line">        x = w * a[j + k],</span><br><span class="line">        a[j + k] = a[j] - x,</span><br><span class="line">        a[j] = a[j] + x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (on == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">      a[i].r /= n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OIWiki</category>
        <category>Poly</category>
      </categories>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
</search>
